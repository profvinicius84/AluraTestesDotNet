name: Executar Testes

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar Repositório
        uses: actions/checkout@v4

      - name: Instalar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restaurar Dependências
        run: dotnet restore ScreenSound.sln

      - name: Executar Testes
        run: dotnet test ScreenSound.sln --logger "trx;LogFileName=resultado.trx" --filter Categoria=Integração

      - name: Upload do artefato de resultado dos testes
        uses: actions/upload-artifact@v4
        with:
          name: resultados-testes
          path: resultado.trx

      - name: Executar testes e gerar cobertura
        run: dotnet test ScreenSound.sln --collect:"XPlat Code Coverage" --filter Categoria=Integração

      - name: Listar arquivos de cobertura
        run: ls ScreenSound.Tests.Integracao/TestResults/**/coverage.cobertura.xml

      - name: Localizar arquivo de cobertura
        id: cobertura
        shell: pwsh
        run: |
          $file = Get-ChildItem -Path "ScreenSound.Tests.Integracao/TestResults" -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
          echo "coverage_file=$($file.FullName)" >> $env:GITHUB_ENV

      - name: Instalar ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Gerar relatório de cobertura
        run: |
          reportgenerator -reports:"${{ env.coverage_file }}" -targetdir:"ScreenSound.Tests.Integracao/RelatorioCobertura" -reporttypes:Html

      - name: Listar arquivos do relatório
        run: ls ScreenSound.Tests.Integracao/RelatorioCobertura

      - name: Upload do artefato do relatório de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: relatorio-cobertura
          path: ScreenSound.Tests.Integracao/RelatorioCobertura